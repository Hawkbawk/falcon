// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/Hawkbawk/falcon/lib/docker (interfaces: DockerClient)

// Package mock_docker is a generated GoMock package.
package mock_docker

import (
	reflect "reflect"

	types "github.com/docker/docker/api/types"
	container "github.com/docker/docker/api/types/container"
	gomock "github.com/golang/mock/gomock"
)

// MockDockerClient is a mock of DockerClient interface.
type MockDockerClient struct {
	ctrl     *gomock.Controller
	recorder *MockDockerClientMockRecorder
}

// MockDockerClientMockRecorder is the mock recorder for MockDockerClient.
type MockDockerClientMockRecorder struct {
	mock *MockDockerClient
}

// NewMockDockerClient creates a new mock instance.
func NewMockDockerClient(ctrl *gomock.Controller) *MockDockerClient {
	mock := &MockDockerClient{ctrl: ctrl}
	mock.recorder = &MockDockerClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDockerClient) EXPECT() *MockDockerClientMockRecorder {
	return m.recorder
}

// GetContainer mocks base method.
func (m *MockDockerClient) GetContainer(arg0 string) (*types.Container, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetContainer", arg0)
	ret0, _ := ret[0].(*types.Container)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetContainer indicates an expected call of GetContainer.
func (mr *MockDockerClientMockRecorder) GetContainer(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContainer", reflect.TypeOf((*MockDockerClient)(nil).GetContainer), arg0)
}

// StartContainer mocks base method.
func (m *MockDockerClient) StartContainer(arg0 string, arg1 *container.HostConfig, arg2 *container.Config, arg3 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartContainer", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// StartContainer indicates an expected call of StartContainer.
func (mr *MockDockerClientMockRecorder) StartContainer(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartContainer", reflect.TypeOf((*MockDockerClient)(nil).StartContainer), arg0, arg1, arg2, arg3)
}

// StopAndRemoveContainer mocks base method.
func (m *MockDockerClient) StopAndRemoveContainer(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StopAndRemoveContainer", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// StopAndRemoveContainer indicates an expected call of StopAndRemoveContainer.
func (mr *MockDockerClientMockRecorder) StopAndRemoveContainer(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopAndRemoveContainer", reflect.TypeOf((*MockDockerClient)(nil).StopAndRemoveContainer), arg0)
}
